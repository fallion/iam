---
swagger: "2.0"
schemes:
  - https
basePath: "/"

info:
  description: Application for handling authorization rules in Kiwi
  title: Kiwi IAM
  version: 1.0.0
  license:
    name: "License: MIT"
    url: "https://github.com/kiwicom/iam/blob/master/LICENSE"

externalDocs:
  description: "Project repository"
  url: "https://github.com/kiwicom/iam"

securityDefinitions:
  bearerAuth:
    type: apiKey
    in: header
    name: Authorization
    description: "Token, Google OIDC or Gitlab JWT, format `Authorization: Bearer <token>` - required for authentication."
  userAgent:
    type: apiKey
    in: header
    name: User-Agent
    description: "User agent of your app in the format `Service/version (Kiwi.com environment)` - required for authentication."

definitions:
  error:
    type: object
    required:
      - message
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
  user:
    description: Single user object
    type: object
    properties:
      boocsek:
        description: Boocsek attributes
        type: object
        properties:
          channel:
            type: string
          kiwibaseId:
            type: integer
          position:
            type: string
          site: 
            type: string
          skills:
            type: array
            items:
              type: string
          staff:
            type: string
          state:
            type: string
          substate:
            type: string
          team: 
            type: string
          teamManager:
            type: string
          tier:
            type: string
      employeeNumber:
        description: employeeNumber in Okta
        type: integer
      firstName:
        description: firstName in Okta
        type: string
      lastName:
        description: lastName in Okta
        type: string
      position:
        description: SF_jobTitle in Okta
        type: string
      department:
        description: department in Okta
        type: string
      email:
        description: email address
        type: string
      location:
        description: SF_location in Okta
        type: string
      isVendor:
        description: based on userType in Okta
        type: boolean
      orgStructure:
        description: SF_orgStructure in Okta
        type: string
      manager:
        description: manager in Okta
        type: string
      permissions:
        description: Permissions from Kiwi IAM
        type: array
        items:
          type: string
      teamMembership:
        description: Team membership in Okta
        type: array
        items:
          type: string
    example:
      boocsek:
        channel: ""
        kiwibaseId: ""
        position: ""
        site: ""
        skills: []
        staff: "" 
        state: ""
        substate: ""
        team: ""
        teamManager: ""
        tier: ""
      department: Department/Section/Team
      email: "employee@kiwi.com"
      employeeNumber: 42069
      firstName: Example
      isVendor: false
      lastName: Employee 
      location: Brno 
      manager: Example Manager
      orgStructure: Department/Section/Team
      permissions: ["access", "edit"]
      position: Engineering Manager
      teamMembership: ["Department/Section/Team"]

security:
  - bearerAuth: []
  - userAgent: []

paths:
  /v1/user:
    get: &user
      summary: "User information from OKTA"
      description: "Get the user information for a given user in OKTA"
      tags:
        - Users
      produces:
        - application/json
        - text/plain
      parameters:
        - in: query
          name: email
          required: true
          description: Email of user
          type: string
        - in: query
          name: service
          required: false
          description: |
            Permissions for the defined service will be included in the response. 
            These are group memberships of `iam-<service>.<permission>` Okta groups.
            If missing, the user-agent is used to determine the service (backwards compatibility) - see the user-agent format.
          type: string 
          default: 
      responses:
        200:
          description: User details
          schema:
            $ref: "#/definitions/user"
        404:
          description: User not found
          schema:
            $ref: "#/definitions/error"
  /healtcheck:
    get:
      summary: "Health check"
      description: "A simple healthcheck endpoint"
      responses:
        200:
          description: Ok


